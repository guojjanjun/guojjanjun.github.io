<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>路人甲&#39;s Notes</title>
  
  <subtitle>&lt;a href=&quot;http://blog.51cto.com/guojuanjun&quot;&gt;http://blog.51cto.com/guojuanjun&lt;/a&gt; 不再更新</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://guojjanjun.github.io/"/>
  <updated>2018-10-17T10:18:05.080Z</updated>
  <id>https://guojjanjun.github.io/</id>
  
  <author>
    <name>路人甲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线程模型</title>
    <link href="https://guojjanjun.github.io/2018/10/17/%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>https://guojjanjun.github.io/2018/10/17/线程模型/</id>
    <published>2018-10-17T09:17:39.000Z</published>
    <updated>2018-10-17T10:18:05.080Z</updated>
    
    <content type="html"><![CDATA[<p>最近阅读&lt;现代操作系统&gt;时，讲到线程根据其存在的位置分为用户级线程和内核级线程。用户级线程存在于用<br>户空间中，他的创建，销毁，调度都由用户空间的线程库来完成。操作系统内核无法感知上层线程的切换。操作<br>系统像不存在多线程一样去作进程调度。内核级线程存在于内核空间中,由操作系统内核创建和管理。用户程序<br>创建的内核线程通过system call创建内核级线程.</p><p>用户级线程可以在非不支持内核线程的系统上实现多线程编程。现代操作系统绝大数都支持内核线程,所以实在<br>方式集在 用户线程和内核级线程的混用方式。更多优缺点，请参考&lt;现代操作系统&gt;原文。</p><p>在操作系统概念到提到用户线线程与内核级线程存在三种对应关系：</p><h3 id="1-多对一"><a href="#1-多对一" class="headerlink" title="1. 多对一"></a>1. 多对一</h3><p>多个用户线程对应一个内核线程。这其实就是纯用户级多线程的实现方式。如果一个线程执行阻塞的系统调用，<br>会导致当前进程被内核调度出去，其他线程也无法执行。任意时刻只能有一个线程访问内核，且多个线程无法<br>调度在多个CPU上,因为他们在内核中的调度单元是进程。腾讯libco框架单个线程上实现多个协程的并发运行。<br><a href="https://blog.csdn.net/chdhust/article/details/53271478" target="_blank" rel="noopener">https://blog.csdn.net/chdhust/article/details/53271478</a></p><h3 id="2-一对一"><a href="#2-一对一" class="headerlink" title="2. 一对一"></a>2. 一对一</h3><p>一个用户线程对应一个内核线程。线程的调度由内核线程的调度来完成。如果一个线程执行阻塞的系统调用，<br>另一个线程会被切换执行,且多个线程可以运行在多个CPU上。比如Java在Linux、windows上的实现,一个<br>java线程通过LWP与一个系统内核线程绑定。缺点，内核线程的数量限制限制了用户线程的数量。</p><h3 id="3-多对一"><a href="#3-多对一" class="headerlink" title="3. 多对一"></a>3. 多对一</h3><p>多个用户线程对应多个内核线程，一般用户线程数大于内核线程数.这种模式不但有一对一的并发性能，而且<br>解决了用户线程数量的限制问题。这种模型又称为二级模型，HP-UX等支持。Solaris9之后采有一对一模型.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近阅读&amp;lt;现代操作系统&amp;gt;时，讲到线程根据其存在的位置分为用户级线程和内核级线程。用户级线程存在于用&lt;br&gt;户空间中，他的创建，销毁，调度都由用户空间的线程库来完成。操作系统内核无法感知上层线程的切换。操作&lt;br&gt;系统像不存在多线程一样去作进程调度。内核级线程存在
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="https://guojjanjun.github.io/2018/09/30/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>https://guojjanjun.github.io/2018/09/30/红黑树/</id>
    <published>2018-09-30T03:36:42.000Z</published>
    <updated>2018-09-30T03:38:59.803Z</updated>
    
    <content type="html"><![CDATA[<p>这个博客讲得很详细：<a href="https://blog.csdn.net/johnny901114/article/details/81046088" target="_blank" rel="noopener">https://blog.csdn.net/johnny901114/article/details/81046088</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个博客讲得很详细：&lt;a href=&quot;https://blog.csdn.net/johnny901114/article/details/81046088&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/john
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java线程栈中的锁信息</title>
    <link href="https://guojjanjun.github.io/2018/09/26/Java%E7%BA%BF%E7%A8%8B%E6%A0%88%E4%B8%AD%E7%9A%84%E9%94%81%E4%BF%A1%E6%81%AF/"/>
    <id>https://guojjanjun.github.io/2018/09/26/Java线程栈中的锁信息/</id>
    <published>2018-09-26T12:22:04.000Z</published>
    <updated>2018-09-27T03:05:58.904Z</updated>
    
    <content type="html"><![CDATA[<p>  分析运行时Java应用性能问题或死锁问题时，获取线程栈中锁信息是最基本的手段。JDK5.0之后加锁存在两种方法：1.Jvm内置的synchronized 2. Java并发包中相关同步类。本篇主要讨论线程栈中表现出来的锁的信息，对于我们分析Java性能或死锁提供哪些线索。</p><h3 id="情况1-Object-wait-Object-wait-int-timeout"><a href="#情况1-Object-wait-Object-wait-int-timeout" class="headerlink" title="情况1:  Object.wait()/ Object.wait(int timeout)"></a>情况1:  Object.wait()/ Object.wait(int timeout)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokeWait</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Object scarce = <span class="keyword">new</span> Object();</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> SyncWaiter(scarce));</span><br><span class="line">        t.setName(<span class="string">"Test-Thread-1"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncWaiter</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   privateObject scarce;</span><br><span class="line">   publicSyncWaiter(Object scarce)&#123;</span><br><span class="line">      <span class="keyword">this</span>.scarce = scarce;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   publicvoidrun() &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (scarce) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                scarce.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"Test-Thread-1" #10 prio=5os_prio=0 tid=0x0000000058709800 nid=0x1d14 in Object.wait() [0x000000005930f000]</span><br><span class="line">  java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">       at java.lang.Object.wait(Native Method)</span><br><span class="line">       - waiting on &lt;<span class="number">0x00000000d7ac6058</span>&gt;(a java.lang.Object)</span><br><span class="line">       at java.lang.Object.wait(Object.java:<span class="number">502</span>)</span><br><span class="line">       at org.guojje.SyncWaiter.run(InvokeWait.java:<span class="number">23</span>)</span><br><span class="line">       - locked &lt;<span class="number">0x00000000d7ac6058</span>&gt; (ajava.lang.Object)</span><br><span class="line">       at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br></pre></td></tr></table></figure><p>这种情况下，线程处于WAITING状态，等待获取对象锁，该线程必须先锁定了该对象(即进入synchronized区域)，才可以调用wait方法(画重点)，并在调用wait方法后释放对象锁，并进入对象锁Wait Set队列等待被唤醒。WAITING状态的线程必须有对应的notify唤醒。这与后面遇到Blocked状态的线程不同，Blocked是不需要唤醒的。<br>备注：<br>     1) 每一个Java对象与生俱来带有唯一一把对象锁(叫Intrinsic lock或Monitor)。<br>      2) (a java.lang.Object)表示资源的类名，这里为一个Object对象。<br>      3) 当调用带有时间参数的Wait方法，这时线程状态显示TIMED_WAITING。<br>      4）Wait Set队列与下面的Entry Set队列的含义，可自行Google。</p><h3 id="情况2-资源争用"><a href="#情况2-资源争用" class="headerlink" title="情况2: 资源争用"></a>情况2: 资源争用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Share</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     Object scarce = <span class="keyword">new</span> Object();</span><br><span class="line">     Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> SyncLock2(scarce));</span><br><span class="line">     thread.setName(<span class="string">"Test-thrad-1"</span>);</span><br><span class="line">     Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> SyncLock2(scarce));</span><br><span class="line">     thread2.setName(<span class="string">"Test-thrad-2"</span>);</span><br><span class="line">     thread.start();</span><br><span class="line">     thread2.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncLock2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Object scarce;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SyncLock2</span><span class="params">(Object scarce)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.scarce = scarce;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">synchronized</span> (scarce) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             System.in.read();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">"Test-thrad-2" #11 prio=5os_prio=0 tid=0x0000000058a09000 nid=0x1c94 waiting for monitor entry [0x00000000595af000]</span><br><span class="line">  java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">       at org.guojje.SyncLock2.run(Share.java:<span class="number">28</span>)</span><br><span class="line">       - waiting to lock &lt;<span class="number">0x00000000d7ac5f48</span>&gt;(a java.lang.Object)</span><br><span class="line">       at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br><span class="line">"Test-thrad-1" #10 prio=5os_prio=0 tid=0x0000000058a08800 nid=0x1eb8 runnable [0x00000000596ce000]</span><br><span class="line">  java.lang.Thread.State: RUNNABLE</span><br><span class="line">       at java.io.FileInputStream.readBytes(Native Method)</span><br><span class="line">       at java.io.FileInputStream.read(FileInputStream.java:<span class="number">246</span>)</span><br><span class="line">       at java.io.BufferedInputStream.fill(BufferedInputStream.java:<span class="number">246</span>)</span><br><span class="line">       at java.io.BufferedInputStream.read(BufferedInputStream.java:<span class="number">265</span>)</span><br><span class="line">       - locked &lt;<span class="number">0x00000000d79d8d38</span>&gt; (ajava.io.BufferedInputStream)</span><br><span class="line">       at org.guojje.SyncLock2.run(Share.java:<span class="number">28</span>)</span><br><span class="line">       - locked &lt;<span class="number">0x00000000d7ac5f48</span>&gt; (a java.lang.Object)</span><br><span class="line">       at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br></pre></td></tr></table></figure><p>Test-thrad-2处于BLOCKED状态，说明线程Test-thrad-2进入synchronized临界区, 进入对象锁的Entry Set队列并等待对象锁0x00000000d79d8d38的释放。通过定位locked <0x00000000d79d8d38>，我们很容易发现哪个线程正在占用这把锁。在性能分析过程，如果发现大量的BLOCKED线程，我们就需要分析谁当前持有这把锁，而且长时间没有释放。 通过locked指示的代码行，我们很容易定位到加锁位置。然后进行降低锁粒度等手段，减少线程加锁的持续时间，从而优化性能。</0x00000000d79d8d38></p><h3 id="情况3-死锁"><a href="#情况3-死锁" class="headerlink" title="情况3 死锁"></a>情况3 死锁</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Object scarce = <span class="keyword">new</span> Object();</span><br><span class="line">        Object scarce2 = <span class="keyword">new</span> Object();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> DeadLock(scarce, scarce2));</span><br><span class="line">        thread.setName(<span class="string">"Test-thrad-1"</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> DeadLock(scarce2, scarce));</span><br><span class="line">        thread2.setName(<span class="string">"Test-thrad-2"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">       thread2.start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Object scarce;</span><br><span class="line">   <span class="keyword">private</span> Object scarce2;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">DeadLock</span><span class="params">(Object scarce,Object scarce2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.scarce = scarce;</span><br><span class="line">        <span class="keyword">this</span>.scarce2 = scarce2;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (scarce) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (scarce2) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">443</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"Test-thrad-2" #11 prio=5 os_prio=0tid=0x00000000185c7800 nid=0x2b88 waiting for monitor entry [0x00000000196bf000]</span><br><span class="line">  java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">       at org.guojje.DeadLock.run(DeadLock.java:<span class="number">21</span>)</span><br><span class="line">       - waiting to lock &lt;<span class="number">0x00000000d7ac5e90</span>&gt;(a java.lang.Object)</span><br><span class="line">       - locked &lt;<span class="number">0x00000000d7ac5ea0</span>&gt;(a java.lang.Object)</span><br><span class="line">       at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br><span class="line">"Test-thrad-1" #10 prio=5os_prio=0 tid=0x00000000185c2800 nid=0x281c waiting for monitor entry [0x00000000194bf000]</span><br><span class="line">  java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">      at org.guojje.DeadLock.run(DeadLock.java:<span class="number">21</span>)</span><br><span class="line">      - waiting to lock &lt;<span class="number">0x00000000d7ac5ea0</span>&gt;(a java.lang.Object)</span><br><span class="line">      - locked &lt;<span class="number">0x00000000d7ac5e90</span>&gt; (ajava.lang.Object)</span><br><span class="line">      at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br></pre></td></tr></table></figure><p>Test-thrad-2线程拿到了0x00000000d7ac5ea0锁，在等待x00000000d7ac5e90锁，而Test-thrad-1刚好相反，发生了死锁的条件, 而且从线程栈很容易定位这些锁是在哪一行代码获取的，且又在哪一行代码阻塞的。JVM线程栈信息的尾端提供了更详细的死锁环的信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line"><span class="string">"Test-thrad-2"</span>:</span><br><span class="line"> waiting to lock monitor <span class="number">0x0000000017235028</span> (object <span class="number">0x00000000d7ac5e90</span>, a java.lang.Object),</span><br><span class="line"> which is held by <span class="string">"Test-thrad-1"</span></span><br><span class="line"><span class="string">"Test-thrad-1"</span>:</span><br><span class="line"> waiting to lock monitor <span class="number">0x00000000172350d8</span> (object <span class="number">0x00000000d7ac5ea0</span>, a java.lang.Object),</span><br><span class="line"> which is held by <span class="string">"Test-thrad-2"</span></span><br><span class="line">Java stack information <span class="keyword">for</span> the threadslisted above:</span><br><span class="line">===================================================</span><br><span class="line"><span class="string">"Test-thrad-2"</span>:</span><br><span class="line">       at org.guojje.DeadLock.run(DeadLock.java:<span class="number">21</span>)</span><br><span class="line">       - waiting to lock &lt;<span class="number">0x00000000d7ac5e90</span>&gt;(a java.lang.Object)</span><br><span class="line">       - locked &lt;<span class="number">0x00000000d7ac5ea0</span>&gt;(a java.lang.Object)</span><br><span class="line">       at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br><span class="line"><span class="string">"Test-thrad-1"</span>:</span><br><span class="line">       at org.guojje.DeadLock.run(DeadLock.java:<span class="number">21</span>)</span><br><span class="line">       - waiting to lock &lt;<span class="number">0x00000000d7ac5ea0</span>&gt;(a java.lang.Object)</span><br><span class="line">       - locked &lt;<span class="number">0x00000000d7ac5e90</span>&gt; (a java.lang.Object)</span><br><span class="line">       at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br><span class="line">Found <span class="number">1</span> deadlock.</span><br></pre></td></tr></table></figure></p><p>你会发现JDK内置的synchronized加锁方式，你会发现问题分析死锁问题非常容易。这个例子就是因为竞争线程对资源的加锁顺序不同，导致死锁。而保持相同的加锁顺序是解决这类死锁问题关健。<br>对于内置的synchronized的同步方式，线程栈提供了足够的信息让我们分析与定位问题。但synchronized不够灵活等，使Java并发包更受程序序员青睐，但同时也为分析这类问题代来复杂性。</p><h3 id="情况1"><a href="#情况1" class="headerlink" title="情况1"></a>情况1</h3><p>同样，我们先看一个ReentrantLock（重入锁的）await方法(与Ojbect.wait区别开来)的调用情况。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> RTLock());</span><br><span class="line">        thread.setName(<span class="string">"Test-thrad-1"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RTLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> ReentrantLock lock= newReentrantLock();</span><br><span class="line">   <span class="keyword">public</span> Condition scarce= lock.newCondition();</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RTLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            scarce.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"Test-thrad-1" #10 prio=5os_prio=0 tid=0x00000000189d0800 nid=0x2da8 waiting on condition [0x000000001968e000]</span><br><span class="line">  java.lang.Thread.State: WAITING (parking)</span><br><span class="line">       at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">       - parkingto wait <span class="keyword">for</span>  &lt;<span class="number">0x00000000d7ac9088</span>&gt;(a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)</span><br><span class="line">       at java.util.concurrent.locks.LockSupport.park(LockSupport.java:<span class="number">175</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:<span class="number">2039</span>)</span><br><span class="line">       at com.guojje2.RTLock.run(RTLock.java:<span class="number">18</span>)</span><br><span class="line">       at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br></pre></td></tr></table></figure><p>显示与synchronized有些不同。Synchronized显示为Wait on，这里- parking to wait for。<br>另外可以发现调用栈再也找不到locked字眼了,虽然你确认该线程一定locked过这把锁（否则无法调用await）。因为这个原因，为定位加锁位置带来难度。</p><h3 id="情况2-资源争用-1"><a href="#情况2-资源争用-1" class="headerlink" title="情况2 资源争用"></a>情况2 资源争用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> RTLock(lock));</span><br><span class="line">        thread.setName(<span class="string">"Test-thrad-1"</span>);</span><br><span class="line">        Thread thread2 =  <span class="keyword">new</span> Thread(<span class="keyword">new</span> RTLock(lock));</span><br><span class="line">        thread2.setName(<span class="string">"Test-thrad-2"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RTLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> ReentrantLock lock;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RTLock</span><span class="params">(ReentrantLock lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">"Test-thrad-2" #11 prio=5os_prio=0 tid=0x0000000018802000 nid=0x3368 waiting on condition [0x000000001965f000]</span><br><span class="line">  java.lang.Thread.State: WAITING (parking)</span><br><span class="line">       at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">       - parking to wait <span class="keyword">for</span>  &lt;<span class="number">0x00000000d7ac72a8</span>&gt; (a java.util.concurrent.locks.ReentrantLock$NonfairSync)</span><br><span class="line">       at java.util.concurrent.locks.LockSupport.park(LockSupport.java:<span class="number">175</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:<span class="number">836</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:<span class="number">870</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:<span class="number">1199</span>)</span><br><span class="line">       at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:<span class="number">209</span>)</span><br><span class="line">       at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:<span class="number">285</span>)</span><br><span class="line">        at com.guojje2.RTLock.run(Main.java:<span class="number">33</span>)</span><br><span class="line">       at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br><span class="line">Locked ownable synchronizers:</span><br><span class="line">    - None</span><br><span class="line">"Test-thrad-1" #10 prio=5os_prio=0 tid=0x0000000018801800 nid=0x2d3c runnable [0x000000001933f000]</span><br><span class="line">  java.lang.Thread.State: RUNNABLE</span><br><span class="line">       at java.io.FileInputStream.readBytes(Native Method)</span><br><span class="line">       at java.io.FileInputStream.read(FileInputStream.java:<span class="number">246</span>)</span><br><span class="line">       at java.io.BufferedInputStream.fill(BufferedInputStream.java:<span class="number">246</span>)</span><br><span class="line">       at java.io.BufferedInputStream.read(BufferedInputStream.java:<span class="number">265</span>)</span><br><span class="line">       - locked &lt;<span class="number">0x00000000d79d8d38</span>&gt; (a java.io.BufferedInputStream)</span><br><span class="line">       at com.guojje2.RTLock.run(Main.java:<span class="number">35</span>)</span><br><span class="line">       at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br><span class="line">  Locked ownable synchronizers:</span><br><span class="line">       - &lt;<span class="number">0x00000000d7ac72a8</span>&gt; (ajava.util.concurrent.locks.ReentrantLock$NonfairSync)</span><br></pre></td></tr></table></figure><p>如果是synchronized的方式，Test-thrad-2线程应该是Blocked状态，但这里为WAITING。这也是内置锁与JUL锁的不同。<br>注： 只要看Blocked状态的线程，代码一定是用synchronized作的同步。<br>在线程栈中多出了Locked ownable synchronizers条目。这是用jstack-l打印出来。（-l表示打印更详细的栈信息）。Java已经做了努力，弥补线程栈没有locked信息的缺陷。假如没有这个条目，无法确认Test-thrad-2等待的锁被哪一个线程持有。即便如此，还是无法定位加锁的代码位置，目前本人并没有找到更好的方法，只能翻代码了。<br>Ownable synchronizers这里的ownable的可以理解为，可被霸占的，即抢到就只属于你的。（有的邪恶哦？）<br>所以Locked ownable synchronizers只会列出排他锁，如ReentrantLock锁和ReentrantReadWriteLock的写锁，而对于ReentrantReadWriteLock读是不会显示的。因为他不算排他锁(ownable)。某些情况下，这一点也为定位问题加在难度。<br>注：- locked <0x00000000d79d8d38> (a java.io.BufferedInputStream)是BufferedInputStream.read上的锁不要搞混.</0x00000000d79d8d38></p><h3 id="情况3-死锁-1"><a href="#情况3-死锁-1" class="headerlink" title="情况3 死锁"></a>情况3 死锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">       ReentrantLock lock2 = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">       Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> RTLock(lock, lock2));</span><br><span class="line">       thread.setName(<span class="string">"Test-thrad-1"</span>);</span><br><span class="line">       Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> RTLock(lock2, lock));</span><br><span class="line">       thread2.setName(<span class="string">"Test-thrad-2"</span>);</span><br><span class="line">       thread.start();</span><br><span class="line">       thread2.start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RTLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> ReentrantLock lock;</span><br><span class="line">   <span class="keyword">private</span> ReentrantLock lock2;</span><br><span class="line">   publicRTLock(ReentrantLock lock, ReentrantLock lock2) &#123;</span><br><span class="line">       <span class="keyword">this</span>.lock = lock;</span><br><span class="line">        <span class="keyword">this</span>.lock2 = lock2;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock2.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock2.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">"Test-thrad-2" #11 prio=5os_prio=0 tid=0x0000000018871000 nid=0x2588 waiting on condition [0x00000000198ef000]</span><br><span class="line">  java.lang.Thread.State: WAITING (parking)</span><br><span class="line">       at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">       - parking to wait <span class="keyword">for</span> &lt;<span class="number">0x00000000d7ac7388</span>&gt; (a java.util.concurrent.locks.ReentrantLock$NonfairSync)</span><br><span class="line">       at java.util.concurrent.locks.LockSupport.park(LockSupport.java:<span class="number">175</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:<span class="number">836</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:<span class="number">870</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:<span class="number">1199</span>)</span><br><span class="line">       at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:<span class="number">209</span>)</span><br><span class="line">       at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:<span class="number">285</span>)</span><br><span class="line">       at com.guojje2.RTLock.run(Main.java:<span class="number">35</span>)</span><br><span class="line">       at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br><span class="line">  Locked ownable synchronizers:</span><br><span class="line">       - &lt;<span class="number">0x00000000d7ac73b8</span>&gt; (ajava.util.concurrent.locks.ReentrantLock$NonfairSync)</span><br><span class="line">"Test-thrad-1" #10 prio=5os_prio=0 tid=0x0000000018870000 nid=0x2fb0 waiting on condition [0x00000000184ae000]</span><br><span class="line">  java.lang.Thread.State: WAITING (parking)</span><br><span class="line">       at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">       - parking to wait <span class="keyword">for</span> &lt;<span class="number">0x00000000d7ac73b8</span>&gt; (a java.util.concurrent.locks.ReentrantLock$NonfairSync)</span><br><span class="line">       at java.util.concurrent.locks.LockSupport.park(LockSupport.java:<span class="number">175</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:<span class="number">836</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:<span class="number">870</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:<span class="number">1199</span>)</span><br><span class="line">       at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:<span class="number">209</span>)</span><br><span class="line">       at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:<span class="number">285</span>)</span><br><span class="line">       at com.guojje2.RTLock.run(Main.java:<span class="number">35</span>)</span><br><span class="line">       at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br><span class="line"> Locked ownable synchronizers:</span><br><span class="line">       - &lt;<span class="number">0x00000000d7ac7388</span>&gt; (ajava.util.concurrent.locks.ReentrantLock$NonfairSync)</span><br><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line"><span class="string">"Test-thrad-2"</span>:</span><br><span class="line"> waiting <span class="keyword">for</span> ownable synchronizer <span class="number">0x00000000d7ac71a0</span>,(a java.util.concurrent.locks.ReentrantLock$NonfairSync),</span><br><span class="line"> which is held by <span class="string">"Test-thrad-1"</span></span><br><span class="line"><span class="string">"Test-thrad-1"</span>:</span><br><span class="line"> waiting <span class="keyword">for</span> ownable synchronizer <span class="number">0x00000000d7ac71d0</span>, (a java.util.concurrent.locks.ReentrantLock$NonfairSync),</span><br><span class="line"> which is held by <span class="string">"Test-thrad-2"</span></span><br><span class="line">.</span><br><span class="line">Java stack information <span class="keyword">for</span> the threadslisted above:</span><br><span class="line">===================================================</span><br><span class="line"><span class="string">"Test-thrad-2"</span>:</span><br><span class="line">       at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">       - parking to wait <span class="keyword">for</span>  &lt;<span class="number">0x00000000d7ac71a0</span>&gt; (a java.util.concurrent.locks.ReentrantLock$NonfairSync)</span><br><span class="line">       at java.util.concurrent.locks.LockSupport.park(LockSupport.java:<span class="number">175</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:<span class="number">836</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:<span class="number">870</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:<span class="number">1199</span>)</span><br><span class="line">       at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:<span class="number">209</span>)</span><br><span class="line">       at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:<span class="number">285</span>)</span><br><span class="line">       at com.guojje2.RTLock.run(Main.java:<span class="number">41</span>)</span><br><span class="line">       at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br><span class="line"><span class="string">"Test-thrad-1"</span>:</span><br><span class="line">       at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">       - parking to wait <span class="keyword">for</span>  &lt;<span class="number">0x00000000d7ac71d0</span>&gt; (ajava.util.concurrent.locks.ReentrantLock$NonfairSync)</span><br><span class="line">       at java.util.concurrent.locks.LockSupport.park(LockSupport.java:<span class="number">175</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:<span class="number">836</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:<span class="number">870</span>)</span><br><span class="line">       at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:<span class="number">1199</span>)</span><br><span class="line">       at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:<span class="number">209</span>)</span><br><span class="line">       at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:<span class="number">285</span>)</span><br><span class="line">       at com.guojje2.RTLock.run(Main.java:<span class="number">41</span>)</span><br><span class="line">       at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br><span class="line">Found <span class="number">1</span> deadlock.</span><br></pre></td></tr></table></figure><p>借助Locked ownable synchronizers，确认哪些线程位于死锁的环形竞争中，还是比较容易。先到这吧。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  分析运行时Java应用性能问题或死锁问题时，获取线程栈中锁信息是最基本的手段。JDK5.0之后加锁存在两种方法：1.Jvm内置的synchronized 2. Java并发包中相关同步类。本篇主要讨论线程栈中表现出来的锁的信息，对于我们分析Java性能或死锁提供哪些线索
      
    
    </summary>
    
    
  </entry>
  
</feed>
